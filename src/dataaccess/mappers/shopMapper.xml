<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="shop">  
  <!-- 기본 상점 목록 조회 -->
  <select id="getShops">
    SELECT
        id,
        interest_id,
        title,
        description,
        phone_number,
        open_time,
        close_time,
        address,
        latitude,
        longitude,
        parking,
        floor,
        price,
        img,
        reg_date,
        mod_date,
        is_partner,
        partner_level,
        partner_priority
    FROM
        shop
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 제휴 매장 우선 노출 기본 상점 목록 조회 -->
  <select id="getShopsWithPartnerPriority">
    SELECT
        id,
        interest_id,
        title,
        description,
        phone_number,
        open_time,
        close_time,
        address,
        latitude,
        longitude,
        parking,
        floor,
        price,
        img,
        reg_date,
        mod_date,
        is_partner,
        partner_level,
        partner_priority
    FROM
        shop
    ORDER BY 
        is_partner DESC,
        partner_level ASC,
        partner_priority ASC,
        id ASC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 제휴 매장만 조회 -->
  <select id="getPartnerShops">
    SELECT
        id,
        interest_id,
        title,
        description,
        phone_number,
        open_time,
        close_time,
        address,
        latitude,
        longitude,
        parking,
        floor,
        price,
        img,
        reg_date,
        mod_date,
        is_partner,
        partner_level,
        partner_priority
    FROM
        shop
    WHERE 
        is_partner = true
    ORDER BY 
        partner_level ASC,
        partner_priority ASC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 특정 등급의 제휴 매장만 조회 -->
  <select id="getPartnerShopsByLevel">
    SELECT
        id,
        interest_id,
        title,
        description,
        phone_number,
        open_time,
        close_time,
        address,
        latitude,
        longitude,
        parking,
        floor,
        price,
        img,
        reg_date,
        mod_date,
        is_partner,
        partner_level,
        partner_priority
    FROM
        shop
    WHERE 
        is_partner = true
        AND partner_level = #{level}
    ORDER BY 
        partner_priority ASC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 가격순으로 정렬된 상점 목록 조회 -->
  <select id="getShopsSortedByPrice">
    SELECT
        id,
        interest_id,
        title,
        description,
        phone_number,
        open_time,
        close_time,
        address,
        latitude,
        longitude,
        parking,
        floor,
        price,
        img,
        reg_date,
        mod_date,
        is_partner,
        partner_level,
        partner_priority
    FROM
        shop
    ORDER BY 
        price ASC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 제휴 매장 우선 노출 + 가격순으로 정렬된 상점 목록 조회 -->
  <select id="getShopsSortedByPriceWithPartnerPriority">
    (SELECT
        id,
        interest_id,
        title,
        description,
        phone_number,
        open_time,
        close_time,
        address,
        latitude,
        longitude,
        parking,
        floor,
        price,
        img,
        reg_date,
        mod_date,
        is_partner,
        partner_level,
        partner_priority
    FROM
        shop
    WHERE
        is_partner = true
    ORDER BY 
        partner_level ASC,
        partner_priority ASC
    LIMIT ${limit})
    
    UNION ALL
    
    (SELECT
        id,
        interest_id,
        title,
        description,
        phone_number,
        open_time,
        close_time,
        address,
        latitude,
        longitude,
        parking,
        floor,
        price,
        img,
        reg_date,
        mod_date,
        is_partner,
        partner_level,
        partner_priority
    FROM
        shop
    WHERE
        is_partner = false OR is_partner IS NULL
    ORDER BY 
        price ASC
    LIMIT ${limit} OFFSET ${offset})
    
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 리뷰 수 기준으로 정렬된 상점 목록 조회 -->
  <select id="getShopsSortedByReviewCount">
    SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        s.is_partner,
        s.partner_level,
        s.partner_priority,
        COUNT(r.id) AS review_count
    FROM
        shop s
    LEFT JOIN 
        shop_review r ON s.id = r.shop_id
    GROUP BY 
        s.id
    ORDER BY 
        review_count DESC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 제휴 매장 우선 노출 + 리뷰 수 기준으로 정렬된 상점 목록 조회 -->
  <select id="getShopsSortedByReviewCountWithPartnerPriority">
    (SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        s.is_partner,
        s.partner_level,
        s.partner_priority,
        COUNT(r.id) AS review_count
    FROM
        shop s
    LEFT JOIN 
        shop_review r ON s.id = r.shop_id
    WHERE
        s.is_partner = true
    GROUP BY 
        s.id
    ORDER BY 
        s.partner_level ASC,
        s.partner_priority ASC
    LIMIT ${limit})
    
    UNION ALL
    
    (SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        s.is_partner,
        s.partner_level,
        s.partner_priority,
        COUNT(r.id) AS review_count
    FROM
        shop s
    LEFT JOIN 
        shop_review r ON s.id = r.shop_id
    WHERE
        s.is_partner = false OR s.is_partner IS NULL
    GROUP BY 
        s.id
    ORDER BY 
        review_count DESC
    LIMIT ${limit} OFFSET ${offset})
    
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 추천순(리뷰 좋아요 합계)으로 정렬된 상점 목록 조회 -->
  <select id="getShopsSortedByRecommended">
    SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        s.is_partner,
        s.partner_level,
        s.partner_priority,
        COALESCE(SUM(r.like_count), 0) AS total_likes
    FROM
        shop s
    LEFT JOIN 
        shop_review r ON s.id = r.shop_id
    GROUP BY 
        s.id
    ORDER BY 
        total_likes DESC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 제휴 매장 우선 노출 + 추천순으로 정렬된 상점 목록 조회 -->
  <select id="getShopsSortedByRecommendedWithPartnerPriority">
    (SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        s.is_partner,
        s.partner_level,
        s.partner_priority,
        COALESCE(SUM(r.like_count), 0) AS total_likes
    FROM
        shop s
    LEFT JOIN 
        shop_review r ON s.id = r.shop_id
    WHERE
        s.is_partner = true
    GROUP BY 
        s.id
    ORDER BY 
        s.partner_level ASC,
        s.partner_priority ASC
    LIMIT ${limit})
    
    UNION ALL
    
    (SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        s.is_partner,
        s.partner_level,
        s.partner_priority,
        COALESCE(SUM(r.like_count), 0) AS total_likes
    FROM
        shop s
    LEFT JOIN 
        shop_review r ON s.id = r.shop_id
    WHERE
        s.is_partner = false OR s.is_partner IS NULL
    GROUP BY 
        s.id
    ORDER BY 
        total_likes DESC
    LIMIT ${limit} OFFSET ${offset})
    
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 특정 상점 조회 -->
  <select id="findShopById">
    SELECT
        id,
        interest_id,
        title,
        description,
        phone_number,
        open_time,
        close_time,
        address,
        latitude,
        longitude,
        parking,
        floor,
        price,
        img,
        reg_date,
        mod_date,
        is_partner,
        partner_level,
        partner_priority
    FROM
      shop 
    <where>
      id = #{id}
    </where>
  </select>
  
  <!-- 제휴매장 테이블과 조인하여 상점 목록 조회 (제휴매장 우선) -->
  <select id="getShopsWithPartnerJoin">
    SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        CASE WHEN p.id IS NOT NULL THEN true ELSE false END AS is_partner,
        p.partner_date,
        p.expiry_date,
        p.status AS partner_status
    FROM
        shop s
    LEFT JOIN
        partner_shop p ON s.id = p.shop_id AND p.status = 'active'
    ORDER BY 
        p.id IS NOT NULL DESC,
        p.partner_date ASC,
        s.id ASC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 제휴매장 테이블과 조인하여 가격순으로 정렬된 상점 목록 조회 (제휴매장 우선) -->
  <select id="getShopsWithPartnerJoinSortedByPrice">
    (SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        CASE WHEN p.id IS NOT NULL THEN true ELSE false END AS is_partner,
        p.partner_date,
        p.expiry_date,
        p.status AS partner_status
    FROM
        shop s
    INNER JOIN
        partner_shop p ON s.id = p.shop_id AND p.status = 'active'
    ORDER BY 
        p.partner_date ASC
    LIMIT ${limit})
    
    UNION ALL
    
    (SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        false AS is_partner,
        NULL AS partner_date,
        NULL AS expiry_date,
        NULL AS partner_status
    FROM
        shop s
    LEFT JOIN
        partner_shop p ON s.id = p.shop_id AND p.status = 'active'
    WHERE
        p.id IS NULL
    ORDER BY 
        s.price ASC
    LIMIT ${limit} OFFSET ${offset})
    
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 제휴매장 테이블과 조인하여 리뷰순으로 정렬된 상점 목록 조회 (제휴매장 우선) -->
  <select id="getShopsWithPartnerJoinSortedByReview">
    (SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        CASE WHEN p.id IS NOT NULL THEN true ELSE false END AS is_partner,
        p.partner_date,
        p.expiry_date,
        p.status AS partner_status,
        COUNT(r.id) AS review_count
    FROM
        shop s
    INNER JOIN
        partner_shop p ON s.id = p.shop_id AND p.status = 'active'
    LEFT JOIN
        shop_review r ON s.id = r.shop_id
    GROUP BY
        s.id, p.id, p.partner_date, p.expiry_date, p.status
    ORDER BY 
        p.partner_date ASC
    LIMIT ${limit})
    
    UNION ALL
    
    (SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        false AS is_partner,
        NULL AS partner_date,
        NULL AS expiry_date,
        NULL AS partner_status,
        COUNT(r.id) AS review_count
    FROM
        shop s
    LEFT JOIN
        partner_shop p ON s.id = p.shop_id AND p.status = 'active'
    LEFT JOIN
        shop_review r ON s.id = r.shop_id
    WHERE
        p.id IS NULL
    GROUP BY
        s.id
    ORDER BY 
        review_count DESC
    LIMIT ${limit} OFFSET ${offset})
    
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 제휴매장만 조회 -->
  <select id="getPartnerShopsWithJoin">
    SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        true AS is_partner,
        p.partner_date,
        p.expiry_date,
        p.status AS partner_status
    FROM
        shop s
    INNER JOIN
        partner_shop p ON s.id = p.shop_id AND p.status = 'active'
    ORDER BY 
        p.partner_date ASC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 제휴매장 상세 조회 -->
  <select id="findPartnerShopById">
    SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        CASE WHEN p.id IS NOT NULL THEN true ELSE false END AS is_partner,
        p.partner_date,
        p.expiry_date,
        p.status AS partner_status
    FROM
        shop s
    LEFT JOIN
        partner_shop p ON s.id = p.shop_id
    WHERE 
        s.id = #{id}
  </select>
  
  <!-- 제휴 정보를 포함한 매장 정보 조회 -->
  <select id="getShopWithPartnerInfo">
    SELECT
        s.id,
        s.interest_id,
        s.title,
        s.description,
        s.phone_number,
        s.open_time,
        s.close_time,
        s.address,
        s.latitude,
        s.longitude,
        s.parking,
        s.floor,
        s.price,
        s.img,
        s.reg_date,
        s.mod_date,
        CASE WHEN p.id IS NOT NULL THEN true ELSE false END AS is_partner,
        p.partner_date,
        p.expiry_date,
        p.status AS partner_status
    FROM
        shop s
    LEFT JOIN
        partner_shop p ON s.id = p.shop_id
    WHERE 
        s.id = #{id}
  </select>
</mapper>