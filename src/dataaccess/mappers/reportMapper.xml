<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="report">
  <!-- 신고 생성 -->
  <insert id="createReport">
    INSERT INTO report (
      target_type,
      target_id,
      user_id,
      report_type,
      description,
      status
    ) VALUES (
      #{targetType},
      #{targetId},
      #{userId},
      #{reportType},
      #{description},
      'pending'
    )
  </insert>
  
  <!-- 사용자가 제출한 신고 목록 조회 -->
  <select id="getReportsByUserId">
    SELECT 
      r.*,
      u.name as user_name,
      u.profile_image as user_profile_image,
      CASE 
        WHEN r.target_type = 'shop' THEN (SELECT title FROM shop WHERE id = r.target_id)
        ELSE '알 수 없음'
      END as target_title
    FROM 
      report r
    LEFT JOIN 
      user u ON r.user_id = u.id
    WHERE 
      r.user_id = #{userId}
    ORDER BY 
      r.reg_date DESC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 특정 신고 조회 -->
  <select id="getReportById">
    SELECT 
      r.*,
      u.name as user_name,
      u.profile_image as user_profile_image,
      ru.name as reviewer_name,
      CASE 
        WHEN r.target_type = 'shop' THEN (SELECT title FROM shop WHERE id = r.target_id)
        ELSE '알 수 없음'
      END as target_title
    FROM 
      report r
    LEFT JOIN 
      user u ON r.user_id = u.id
    LEFT JOIN 
      user ru ON r.reviewed_by = ru.id
    WHERE 
      r.id = #{reportId}
  </select>
  
  <!-- 전체 신고 목록 조회 (관리자용) -->
  <select id="getAllReports">
    SELECT 
      r.*,
      u.name as user_name,
      u.profile_image as user_profile_image,
      CASE 
        WHEN r.target_type = 'shop' THEN (SELECT title FROM shop WHERE id = r.target_id)
        ELSE '알 수 없음'
      END as target_title
    FROM 
      report r
    LEFT JOIN 
      user u ON r.user_id = u.id
    <where>
      <if test="status != null">
        r.status = #{status}
      </if>
      <if test="targetType != null">
        AND r.target_type = #{targetType}
      </if>
    </where>
    ORDER BY 
      r.reg_date DESC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 특정 대상에 대한 신고 목록 조회 -->
  <select id="getReportsByTarget">
    SELECT 
      r.*,
      u.name as user_name,
      u.profile_image as user_profile_image
    FROM 
      report r
    LEFT JOIN 
      user u ON r.user_id = u.id
    WHERE 
      r.target_type = #{targetType}
      AND r.target_id = #{targetId}
    ORDER BY 
      r.reg_date DESC
    LIMIT ${limit} OFFSET ${offset}
  </select>
  
  <!-- 신고 상태 업데이트 -->
  <update id="updateReportStatus">
    UPDATE report
    SET 
      status = #{status},
      admin_comment = #{adminComment},
      reviewed_by = #{reviewedBy},
      mod_date = NOW()
    WHERE 
      id = #{reportId}
  </update>
  
  <!-- 신고 통계 조회 -->
  <select id="getReportStats">
    SELECT
      (SELECT COUNT(*) FROM report) as total_reports,
      (SELECT COUNT(*) FROM report WHERE status = 'pending') as pending,
      (SELECT COUNT(*) FROM report WHERE status = 'in_review') as in_review,
      (SELECT COUNT(*) FROM report WHERE status = 'resolved') as resolved,
      (SELECT COUNT(*) FROM report WHERE status = 'rejected') as rejected,
      (SELECT COUNT(*) FROM report WHERE target_type = 'shop') as shop_reports,
      (SELECT COUNT(*) FROM report WHERE target_type = 'comment') as comment_reports,
      (SELECT COUNT(*) FROM report WHERE report_type = 'spam') as spam,
      (SELECT COUNT(*) FROM report WHERE report_type = 'inappropriate') as inappropriate,
      (SELECT COUNT(*) FROM report WHERE report_type = 'fraud') as fraud,
      (SELECT COUNT(*) FROM report WHERE report_type = 'offensive') as offensive,
      (SELECT COUNT(*) FROM report WHERE report_type = 'harassment') as harassment,
      (SELECT COUNT(*) FROM report WHERE report_type = 'others') as others
  </select>
</mapper> 